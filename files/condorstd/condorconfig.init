#! /bin/sh
#
# Simple script to create a config file so the
# startd will connect to a randomized collector port. 
#
#
# chkconfig: 2345 80 20
# description: Condor HTC computing platform
#

# Source function library.
. /etc/rc.d/init.d/functions

if [ -f /etc/sysconfig/condorconfig ]; then
	. /etc/sysconfig/condorconfig
fi

config_attrs() {
	# If available, publish public ip and instanceid via Startd
	# Seen to work on EC2 and Openstack v4
	
	    attrfile=/etc/condor/config.d/92cloudattrs.config
        PUBID=`/usr/bin/curl -s http://169.254.169.254/latest/meta-data/public-ipv4`
        PUBDNS=`/usr/bin/curl -s http://169.254.169.254/latest/meta-data/public-hostname`
        IID=`/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id`
        ITYPE=`/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-type`
        echo "EC2PublicIP = \"$PUBID\"" > $attrfile
        echo "EC2PublicDNS = \"$PUBDNS\"" >> $attrfile
        echo "EC2InstanceID = \"$IID\"" >> $attrfile
        echo "EC2InstanceType = \"$ITYPE\"" >> $attrfile
        echo 'STARTD_EXPRS = $(STARTD_EXPRS) EC2InstanceID EC2PublicIP EC2PublicDNS EC2InstanceType' >> $attrfile
        echo 'MASTER_EXPRS = $(MASTER_EXPRS) EC2InstanceID EC2PublicIP EC2PublicDNS EC2InstanceType' >> $attrfile
        chmod a+r $attrfile

}

config_password() {
    # Create encrypted condor_password file from plain text /etc/condor/password contents. 
	CPASSWD=`cat /etc/condor/password`
	/usr/sbin/condor_store_cred -p $CPASSWD -f /etc/condor/password_file
	chmod ugo-x /etc/condor/password_file
	chmod go-wx /etc/condor/password_file
	chmod o-r /etc/condor/password_file
}

config_slots() {
	# Ensure slot account is present for each CPU
	numcpus=`cat /proc/cpuinfo | grep "^processor" | wc -l`
	while [ $numcpus -gt 0 ]; do
		/usr/bin/useradd "slot$numcpus"
		numcpus=$(($numcpus-1))
	done
}


start() {
	echo -n $"Setting up Condor attributes, slots, password: "
	config_attrs
	config_password
	config_slots
	
	RETVAL=$?
	echo
	return $RETVAL

}

stop() {
	RETVAL=0
	return $RETVAL

}

restart() {
        stop
        start
}

case "$1" in
start)
        start
        ;;
stop)
        stop
        ;;
restart)
        restart
        ;;
*)
        echo $"Usage: $0 {start|stop|restart}"
        RETVAL=2
esac

exit $RETVAL

